using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Collections;
using System.ComponentModel;
using System.Diagnostics.CodeAnalysis;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Runtime.Serialization;
using System.Text.RegularExpressions;
using System.Text;
using System;

class Result
{
    static int[] parent;
    static int[] size;

    // Find function with path compression
    static int Find(int x)
    {
        if (parent[x] != x)
            parent[x] = Find(parent[x]);
        return parent[x];
    }

    // Union function to merge two sets
    static void Union(int a, int b)
    {
        int rootA = Find(a);
        int rootB = Find(b);

        if (rootA != rootB)
        {
            parent[rootB] = rootA;
            size[rootA] += size[rootB];
        }
    }

    /*
     * Complete the 'componentsInGraph' function below.
     *
     * The function is expected to return an INTEGER_ARRAY.
     * The function accepts 2D_INTEGER_ARRAY gb as parameter.
     */

    public static List<int> componentsInGraph(List<List<int>> gb)
    {
        int maxNode = 200000; // problem constraint
        parent = new int[maxNode + 1];
        size = new int[maxNode + 1];

        for (int i = 1; i <= maxNode; i++)
        {
            parent[i] = i;
            size[i] = 1;
        }

        foreach (var edge in gb)
        {
            int a = edge[0];
            int b = edge[1];
            Union(a, b);
        }

        // Find sizes of all connected components
        List<int> groupSizes = new List<int>();
        for (int i = 1; i <= maxNode; i++)
        {
            if (parent[i] == i && size[i] > 1)
                groupSizes.Add(size[i]);
        }

        int minSize = groupSizes.Min();
        int maxSize = groupSizes.Max();

        return new List<int> { minSize, maxSize };
    }

}

class Solution
{
    public static void Main(string[] args)
    {
        TextWriter textWriter = new StreamWriter(@System.Environment.GetEnvironmentVariable("OUTPUT_PATH"), true);

        int n = Convert.ToInt32(Console.ReadLine().Trim());

        List<List<int>> gb = new List<List<int>>();

        for (int i = 0; i < n; i++)
        {
            gb.Add(Console.ReadLine().TrimEnd().Split(' ').ToList().Select(gbTemp => Convert.ToInt32(gbTemp)).ToList());
        }

        List<int> result = Result.componentsInGraph(gb);

        textWriter.WriteLine(String.Join(" ", result));

        textWriter.Flush();
        textWriter.Close();
    }
}
